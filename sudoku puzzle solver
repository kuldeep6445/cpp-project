#include<iostream>
#include<conio.h>
#include<stdio.h>

using namespace std;

class sudoku{
	int position[9][9][11];
	
	
	public:
		void positioning(void);// filling of intial values
		void display(void);		
		void filling(void);// manual filling of values
		int locatorx(int x);
		int locatory(int y);
		void solving_line_x(void);//remove hints of all box in same line if a box is filled with same value --------working
		void solving_line_y(void);//remove hints of all box in same line if a box is filled with same value --------working
		void solving_block(void);//remove hints of all box in same block if a box is filled with same value --------working
		int locator_block(int x);
		void see(void);//displays hints
		void overall_solving(void);//--------working
		bool onlyone(int x);//return true if only one hint is present in a box
		void method_2(void);// solving using mini hints
		int onlyoneint(int x);//return hint if only that one hint is present in a box
		void method_1(void);//solving by visual method
		void firstcheck(void);//deletes all hints if box is filled
		void clear(void);//does partial_hint_postioning and overall_solving to clear any error
		void method_1_xline(void);
		void method_1_yline(void);
		void method_1_block(void);
		void saver(void);
		
		
}a;


int main(){
	
	
	int info[100];
	int x;
	int y;
	a.positioning();
	a.display();
	a.filling();
	system("CLS");

	a.saver();
	
	for(int i=0;i<50;i++){
	cout<<i<<"\n\n";	
system("CLS");
	a.overall_solving();
	a.display();
	a.method_1();
	a.clear();
	a.method_2();
	
}
	
	
	
}

void sudoku::firstcheck(){
	
	for(int i=0;i<9;i++){
		for(int j=0;j<9;j++){
			if(position[i][j][0]<10){
				for(int k=1;k<10;k++){
					position[i][j][k]=0;
				}
			}
		}
	}
	
}

void sudoku::positioning(void){
	
	int k=10;
	for(int i=0;i<9;i++){
		for(int j=0;j<9;j++){
			for(int a=1;a<10;a++){
				position[i][j][a]=a;
			}
			position[i][j][0]=k;
			position[i][j][10]=k;
			k++;
		}	
	}	

}

int sudoku::locator_block(int x){
	
	     if(x==10||x==11||x==12||x==19||x==20||x==21||x==28||x==29||x==30){
		return 1;
	}
	else if(x==13||x==14||x==15||x==22||x==23||x==24||x==31||x==32||x==33){
		return 2;
	}
	else if(x==16||x==17||x==18||x==25||x==26||x==27||x==34||x==35||x==36){
		return 3;
	}
	else if(x==37||x==38||x==39||x==46||x==47||x==48||x==55||x==56||x==57){
		return 4;
	}
	else if(x==40||x==41||x==42||x==49||x==50||x==51||x==58||x==59||x==60){
		return 5;
	}
	else if(x==43||x==44||x==45||x==52||x==53||x==54||x==61||x==62||x==63){
		return 6;
	}
	else if(x==64||x==65||x==66||x==73||x==74||x==75||x==82||x==83||x==84){
		return 7;
	}
	else if(x==67||x==68||x==69||x==76||x==77||x==78||x==85||x==86||x==87){
		return 8;
	}
	else if(x==70||x==71||x==72||x==79||x==80||x==81||x==88||x==89||x==90){
		return 9;
	}
	
}

void sudoku::display(void){
	a.firstcheck();
	
	for(int i=0;i<9;i++){
		for(int j=0;j<9;j++){
			
		
			
			if(position[i][j][0]<10){
				cout<<" "<<position[i][j][0]<<"  ";
			}
	else{	cout<<position[i][j][0]<<"  "; } //for display of position number
		if(j==2||j==5){
			cout<<"|";
		}	
			
		}
		
		cout<<endl;
		
		if(i==2||i==5){
			cout<<"------------------------------------------------\n";
		}	
	}
//	cout<<"\n\n\n\n\n\n\n\n";
//	a.see();
	
	
}

int sudoku::locatorx(int x){
	     if(x==10||x==19||x==28||x==37||x==46||x==55||x==64||x==73||x==82){return 0;
	}
	else if(x==11||x==20||x==29||x==38||x==47||x==56||x==65||x==74||x==83){return 1;
	}
	else if(x==12||x==21||x==30||x==39||x==48||x==57||x==66||x==75||x==84){return 2;
	}
	else if(x==13||x==22||x==31||x==40||x==49||x==58||x==67||x==76||x==85){return 3;
	}
	else if(x==14||x==23||x==32||x==41||x==50||x==59||x==68||x==77||x==86){return 4;
	}
	else if(x==15||x==24||x==33||x==42||x==51||x==60||x==69||x==78||x==87){return 5;
	}
	else if(x==16||x==25||x==34||x==43||x==52||x==61||x==70||x==79||x==88){return 6;
	}
	else if(x==17||x==26||x==35||x==44||x==53||x==62||x==71||x==80||x==89){return 7;
	}
	else if(x==18||x==27||x==36||x==45||x==54||x==63||x==72||x==81||x==90){return 8;
	}
}

int sudoku::locatory(int x){
	
	if(x>=10&&x<=18){return 0;
	}
	else if(x>=19&&x<=27){return 1;
	}
	else if(x>=28&&x<=36){return 2;
	}
	else if(x>=37&&x<=45){return 3;
	}
	else if(x>=46&&x<=54){return 4;
	}
	else if(x>=55&&x<=63){return 5;
	}
	else if(x>=64&&x<=72){return 6;
	}
	else if(x>=73&&x<=81){return 7;
	}
	else if(x>=82&&x<=90){return 8;
	}
	
}

void sudoku::filling(){
	int x,y,j,k;
	while(x!=100){
	
	system("CLS");
	a.display();
	
	cout<<"\n\n\nEnter position no. to enter its value \n\n\n To exit filling enter 100\n";
	cin>>x;
	if(x==100){break;
	}
	j=a.locatorx(x);
	k=a.locatory(x);
	cout<<"\n\n enter number to take its place:";
	cin>>y;
	position[k][j][0]=y;
	for(int z=1;z<10;z++){
		position[k][j][z]=0;
	}
}




}

void sudoku::solving_line_x(){
	
	a.firstcheck();
	
	for(int i=0;i<9;i++){
		for(int j=0;j<9;j++){
			if(position[i][j][0]<10){
				for(int z=0;z<9;z++){
					position[i][z][position[i][j][0]]=0;
				}
			}
		}
	}

}
	
void sudoku::solving_line_y(){
	
	a.firstcheck();
	
for(int i=0;i<9;i++){
		for(int j=0;j<9;j++){
			if(position[j][i][0]<10){
				for(int z=0;z<9;z++){
					position[z][i][position[j][i][0]]=0;
				}
			}
		}
	}
	}
		
void sudoku::see(){
//	system("CLS");
	for(int i=0;i<9;i++){
		for(int j=0;j<9;j++){
			for(int k=0;k<10;k++){
				if(position[i][j][k]<10){
					cout<<" "<<position[i][j][k]<<" ";
				}
				else{
				
				cout<<position[i][j][k]<<" ";}
			}cout<<endl;
		}
	}
	
	
}

void sudoku::solving_block(){
	
	a.firstcheck();
	
	for(int i=0;i<9;i++){
		for(int j=0;j<9;j++){
			int x=0;
			if(position[i][j][0]<10){
				x=locator_block(position[i][j][10]);
			}
			if(x==1){
				position[0][0][position[i][j][0]]=0;
				position[1][0][position[i][j][0]]=0;
				position[2][0][position[i][j][0]]=0;
				position[0][1][position[i][j][0]]=0;
				position[1][1][position[i][j][0]]=0;
				position[2][1][position[i][j][0]]=0;
				position[0][2][position[i][j][0]]=0;
				position[1][2][position[i][j][0]]=0;
				position[2][2][position[i][j][0]]=0;
			}
			else if(x==2){
				position[0][3][position[i][j][0]]=0;
				position[1][3][position[i][j][0]]=0;
				position[2][3][position[i][j][0]]=0;
				position[0][4][position[i][j][0]]=0;
				position[1][4][position[i][j][0]]=0;
				position[2][4][position[i][j][0]]=0;
				position[0][5][position[i][j][0]]=0;
				position[1][5][position[i][j][0]]=0;
				position[2][5][position[i][j][0]]=0;
			}
			else if(x==3){
				position[0][6][position[i][j][0]]=0;
				position[1][6][position[i][j][0]]=0;
				position[2][6][position[i][j][0]]=0;
				position[0][7][position[i][j][0]]=0;
				position[1][7][position[i][j][0]]=0;
				position[2][7][position[i][j][0]]=0;
				position[0][8][position[i][j][0]]=0;
				position[1][8][position[i][j][0]]=0;
				position[2][8][position[i][j][0]]=0;
			}
			else if(x==4){
				position[3][0][position[i][j][0]]=0;
				position[4][0][position[i][j][0]]=0;
				position[5][0][position[i][j][0]]=0;
				position[3][1][position[i][j][0]]=0;
				position[4][1][position[i][j][0]]=0;
				position[5][1][position[i][j][0]]=0;
				position[3][2][position[i][j][0]]=0;
				position[4][2][position[i][j][0]]=0;
				position[5][2][position[i][j][0]]=0;
			}
			else if(x==5){
				position[3][3][position[i][j][0]]=0;
				position[4][3][position[i][j][0]]=0;
				position[5][3][position[i][j][0]]=0;
				position[3][4][position[i][j][0]]=0;
				position[4][4][position[i][j][0]]=0;
				position[5][4][position[i][j][0]]=0;
				position[3][5][position[i][j][0]]=0;
				position[4][5][position[i][j][0]]=0;
				position[5][5][position[i][j][0]]=0;
			}
			else if(x==6){
				position[3][6][position[i][j][0]]=0;
				position[4][6][position[i][j][0]]=0;
				position[5][6][position[i][j][0]]=0;
				position[3][7][position[i][j][0]]=0;
				position[4][7][position[i][j][0]]=0;
				position[5][7][position[i][j][0]]=0;
				position[3][8][position[i][j][0]]=0;
				position[4][8][position[i][j][0]]=0;
				position[5][8][position[i][j][0]]=0;
		}
			else if(x==7){
				position[6][0][position[i][j][0]]=0;
				position[7][0][position[i][j][0]]=0;
				position[8][0][position[i][j][0]]=0;
				position[6][1][position[i][j][0]]=0;
				position[7][1][position[i][j][0]]=0;
				position[8][1][position[i][j][0]]=0;
				position[6][2][position[i][j][0]]=0;
				position[7][2][position[i][j][0]]=0;
				position[8][2][position[i][j][0]]=0;
			}
			else if(x==8){
				position[6][3][position[i][j][0]]=0;
				position[7][3][position[i][j][0]]=0;
				position[8][3][position[i][j][0]]=0;
				position[6][4][position[i][j][0]]=0;
				position[7][4][position[i][j][0]]=0;
				position[8][4][position[i][j][0]]=0;
				position[6][5][position[i][j][0]]=0;
				position[7][5][position[i][j][0]]=0;
				position[8][5][position[i][j][0]]=0;
			}
			else if(x==9){
				position[6][6][position[i][j][0]]=0;
				position[7][6][position[i][j][0]]=0;
				position[8][6][position[i][j][0]]=0;
				position[6][7][position[i][j][0]]=0;
				position[7][7][position[i][j][0]]=0;
				position[8][7][position[i][j][0]]=0;
				position[6][8][position[i][j][0]]=0;
				position[7][8][position[i][j][0]]=0;
				position[8][8][position[i][j][0]]=0;
			}
	}
}
}	
	
void sudoku::overall_solving(){
a.firstcheck();
	a.solving_line_x();
	a.solving_line_y();
	a.solving_block();
}	
	
bool sudoku::onlyone(int x){

a.firstcheck();

	int j=a.locatorx(x);
int i=a.locatory(x);

if((position[i][j][1]!=0)&&(position[i][j][2]==0)&&(position[i][j][3]==0)&&(position[i][j][4]==0)&&(position[i][j][5]==0)&&(position[i][j][6]==0)&&(position[i][j][7]==0)&&(position[i][j][8]==0)&&(position[i][j][9]==0)){
return true;
}

else if((position[i][j][1]==0)&&(position[i][j][2]!=0)&&(position[i][j][3]==0)&&(position[i][j][4]==0)&&(position[i][j][5]==0)&&(position[i][j][6]==0)&&(position[i][j][7]==0)&&(position[i][j][8]==0)&&(position[i][j][9]==0)){
return true;
}

else if((position[i][j][1]==0)&&(position[i][j][2]==0)&&(position[i][j][3]!=0)&&(position[i][j][4]==0)&&(position[i][j][5]==0)&&(position[i][j][6]==0)&&(position[i][j][7]==0)&&(position[i][j][8]==0)&&(position[i][j][9]==0)){
return true;
}

else if((position[i][j][1]==0)&&(position[i][j][2]==0)&&(position[i][j][3]==0)&&(position[i][j][4]!=0)&&(position[i][j][5]==0)&&(position[i][j][6]==0)&&(position[i][j][7]==0)&&(position[i][j][8]==0)&&(position[i][j][9]==0)){
return true;
}
	
else if((position[i][j][1]==0)&&(position[i][j][2]==0)&&(position[i][j][3]==0)&&(position[i][j][4]==0)&&(position[i][j][5]!=0)&&(position[i][j][6]==0)&&(position[i][j][7]==0)&&(position[i][j][8]==0)&&(position[i][j][9]==0)){
return true;
}

else if((position[i][j][1]==0)&&(position[i][j][2]==0)&&(position[i][j][3]==0)&&(position[i][j][4]==0)&&(position[i][j][5]==0)&&(position[i][j][6]!=0)&&(position[i][j][7]==0)&&(position[i][j][8]==0)&&(position[i][j][9]==0)){
return true;
}	

else if((position[i][j][1]==0)&&(position[i][j][2]==0)&&(position[i][j][3]==0)&&(position[i][j][4]==0)&&(position[i][j][5]==0)&&(position[i][j][6]==0)&&(position[i][j][7]!=0)&&(position[i][j][8]==0)&&(position[i][j][9]==0)){
return true;
}

else if((position[i][j][1]==0)&&(position[i][j][2]==0)&&(position[i][j][3]==0)&&(position[i][j][4]==0)&&(position[i][j][5]==0)&&(position[i][j][6]==0)&&(position[i][j][7]==0)&&(position[i][j][8]!=0)&&(position[i][j][9]==0)){
return true;
}

else if((position[i][j][1]==0)&&(position[i][j][2]==0)&&(position[i][j][3]==0)&&(position[i][j][4]==0)&&(position[i][j][5]==0)&&(position[i][j][6]==0)&&(position[i][j][7]==0)&&(position[i][j][8]==0)&&(position[i][j][9]!=0)){
return true;
}
else {
	return false;
}
}

int sudoku::onlyoneint(int x){
a.firstcheck();	
int j=a.locatorx(x);
int i=a.locatory(x);

     if((position[i][j][1]!=0)&&(position[i][j][2]==0)&&(position[i][j][3]==0)&&(position[i][j][4]==0)&&(position[i][j][5]==0)&&(position[i][j][6]==0)&&(position[i][j][7]==0)&&(position[i][j][8]==0)&&(position[i][j][9]==0)){
return 1;
}

else if((position[i][j][1]==0)&&(position[i][j][2]!=0)&&(position[i][j][3]==0)&&(position[i][j][4]==0)&&(position[i][j][5]==0)&&(position[i][j][6]==0)&&(position[i][j][7]==0)&&(position[i][j][8]==0)&&(position[i][j][9]==0)){
return 2;
}

else if((position[i][j][1]==0)&&(position[i][j][2]==0)&&(position[i][j][3]!=0)&&(position[i][j][4]==0)&&(position[i][j][5]==0)&&(position[i][j][6]==0)&&(position[i][j][7]==0)&&(position[i][j][8]==0)&&(position[i][j][9]==0)){
return 3;
}

else if((position[i][j][1]==0)&&(position[i][j][2]==0)&&(position[i][j][3]==0)&&(position[i][j][4]!=0)&&(position[i][j][5]==0)&&(position[i][j][6]==0)&&(position[i][j][7]==0)&&(position[i][j][8]==0)&&(position[i][j][9]==0)){
return 4;
}
	
else if((position[i][j][1]==0)&&(position[i][j][2]==0)&&(position[i][j][3]==0)&&(position[i][j][4]==0)&&(position[i][j][5]!=0)&&(position[i][j][6]==0)&&(position[i][j][7]==0)&&(position[i][j][8]==0)&&(position[i][j][9]==0)){
return 5;
}

else if((position[i][j][1]==0)&&(position[i][j][2]==0)&&(position[i][j][3]==0)&&(position[i][j][4]==0)&&(position[i][j][5]==0)&&(position[i][j][6]!=0)&&(position[i][j][7]==0)&&(position[i][j][8]==0)&&(position[i][j][9]==0)){
return 6;
}	

else if((position[i][j][1]==0)&&(position[i][j][2]==0)&&(position[i][j][3]==0)&&(position[i][j][4]==0)&&(position[i][j][5]==0)&&(position[i][j][6]==0)&&(position[i][j][7]!=0)&&(position[i][j][8]==0)&&(position[i][j][9]==0)){
return 7;
}

else if((position[i][j][1]==0)&&(position[i][j][2]==0)&&(position[i][j][3]==0)&&(position[i][j][4]==0)&&(position[i][j][5]==0)&&(position[i][j][6]==0)&&(position[i][j][7]==0)&&(position[i][j][8]!=0)&&(position[i][j][9]==0)){
return 8;
}

else if((position[i][j][1]==0)&&(position[i][j][2]==0)&&(position[i][j][3]==0)&&(position[i][j][4]==0)&&(position[i][j][5]==0)&&(position[i][j][6]==0)&&(position[i][j][7]==0)&&(position[i][j][8]==0)&&(position[i][j][9]!=0)){
return 9;
}
	
}

void sudoku::method_2(){
	a.firstcheck();
	a.overall_solving();

	for(int i=10;i<=90;i++){
		if(a.onlyone(i)){
			position[a.locatory(i)][a.locatorx(i)][0]=a.onlyoneint(i);
		}
	}
	
}

void sudoku::method_1(){
	
	a.method_1_xline();
	a.clear();
	a.method_1_yline();
	a.clear();
	a.method_1_block();
	a.clear();
	
	
	
}

void sudoku::clear(void){
	
	for(int i=0;i<9;i++){
		for(int j=0;j<9;j++){
			for(int k=1;k<10;k++){
				
				position[i][j][k]=k;
				
			}
		}
	}
	
	a.firstcheck();
	a.overall_solving();
	a.firstcheck();
	
	
}

void sudoku::method_1_xline(){
for(int k=1;k<10;k++){

	for(int i=0;i<9;i++){
		
		int check=0;
		
		for(int j=0;j<9;j++){

				if(position[i][j][k]==0){
					check++;
				}
		
			}
		
		if(check==8){
			
			for(int j=0;j<9;j++){
				if(position[i][j][k]!=0){
					position[i][j][0]=k;
				}
			}
			
		}
				
	}

}

}

void sudoku::method_1_yline(){
	
for(int k=1;k<10;k++){

	for(int i=0;i<9;i++){
		
		int check=0;
		
		for(int j=0;j<9;j++){

				if(position[j][i][k]==0){
					check++;
				}
		
			}
		
		if(check==8){
			
			for(int j=0;j<9;j++){
				if(position[j][i][k]!=0){
					position[j][i][0]=k;
				}
			}
			
		}
				
	}

}

}
	
void sudoku::method_1_block(){


for(int k=1;k<10;k++){


int	check1=0;
int y=0,x=0;
	for(int i=0;i<=2;i++){
		for(int j=0;j<=2;j++){
			
			if(position[i][j][k]==0){
				check1++;
			}
			else{
				y=i;
				x=j;
			}
			
		}
	}
	
	if(check1==8){
		position[y][x][0]=k;
	}
	
	//block2
	check1=0;
	 y=0,x=0;
	for(int i=0;i<=2;i++){
		for(int j=3;j<=5;j++){
			
			if(position[i][j][k]==0){
				check1++;
			}
			else{
				y=i;
				x=j;
			}
			
		}
	}
	
	if(check1==8){
		position[y][x][0]=k;
	}
	
	//block3
	check1=0;
	 y=0,x=0;
	for(int i=0;i<=2;i++){
		for(int j=6;j<=8;j++){
			
			if(position[i][j][k]==0){
				check1++;
			}
			else{
				y=i;
				x=j;
			}
			
		}
	}
	
	if(check1==8){
		position[y][x][0]=k;
	}
	
	//block4
	check1=0;
	 y=0,x=0;
	for(int i=3;i<=5;i++){
		for(int j=0;j<=2;j++){
			
			if(position[i][j][k]==0){
				check1++;
			}
			else{
				y=i;
				x=j;
			}
			
		}
	}
	
	if(check1==8){
		position[y][x][0]=k;
	}
	
	//block5
	check1=0;
	 y=0,x=0;
	for(int i=3;i<=5;i++){
		for(int j=3;j<=5;j++){
			
			if(position[i][j][k]==0){
				check1++;
			}
			else{
				y=i;
				x=j;
			}
			
		}
	}
	
	if(check1==8){
		position[y][x][0]=k;
	}
	
	//block6
	check1=0;
	 y=0,x=0;
	for(int i=3;i<=5;i++){
		for(int j=6;j<=8;j++){
			
			if(position[i][j][k]==0){
				check1++;
			}
			else{
				y=i;
				x=j;
			}
			
		}
	}
	
	if(check1==8){
		position[y][x][0]=k;
	}
	
	//block7
	check1=0;
	 y=0,x=0;
	for(int i=6;i<=8;i++){
		for(int j=0;j<=2;j++){
			
			if(position[i][j][k]==0){
				check1++;
			}
			else{
				y=i;
				x=j;
			}
			
		}
	}
	
	if(check1==8){
		position[y][x][0]=k;
	}
	
	//block8
	check1=0;
	 y=0,x=0;
	for(int i=6;i<=8;i++){
		for(int j=3;j<=5;j++){
			
			if(position[i][j][k]==0){
				check1++;
			}
			else{
				y=i;
				x=j;
			}
			
		}
	}
	
	if(check1==8){
		position[y][x][0]=k;
	}
	
	//block9
	check1=0;
	 y=0,x=0;
	for(int i=6;i<=8;i++){
		for(int j=6;j<=9;j++){
			
			if(position[i][j][k]==0){
				check1++;
			}
			else{
				y=i;
				x=j;
			}
			
		}
	}
	
	if(check1==8){
		position[y][x][0]=k;
	}
	
	
	
}
}

void sudoku::saver(){
	int y;
		cout<<"\n\n\nto save press 111\nto load press 222\nto continue press any other key\n";
	cin>>y;
	if(y==111){
		FILE *fp;
		
		char filename[50];
		
		cout<<"enter name of file\n";
		
		cin>>filename;
		fp=fopen(filename,"w");
		if(fp==NULL){
			cout<<"\n file not opened ";
		}
		else{
			cout<<"\nfile opened successfully\n";
		}
		
		for(int i=0;i<9;i++){
			for(int j=0;j<9;j++){
				if(position[i][j][0]<10){
					fprintf(fp,"0%d",position[i][j][0]);
				}
				else{
					fprintf(fp,"%d",position[i][j][0]);
				}
			}
		}
		
			cout<<"\nfile saved\n";	
	}
	
	else if(y==222){
		
		char filen[50];
		cout<<"\nenter file name to open:\n";
		cin>>filen;
		
		FILE *fl;
		fl=fopen(filen,"r");
		if(fl==NULL){
			cout<<"\n file not opened ";
		}
		else{
			cout<<"\nfile opened successfully\n";
		}
		
		int b,c;
		int count=10;
		char ch;
		int inf[100];
		while(true){
			
			c=fgetc(fl);
			b=fgetc(fl);
			if(c==EOF||b==EOF){
				break;
			}
			c=c-48;
			b=b-48;
			position[a.locatory(count)][a.locatorx(count)][0]=c*10+b;
			count++;
		}

	}
	
}









